// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LPSql.proto

#ifndef PROTOBUF_LPSql_2eproto__INCLUDED
#define PROTOBUF_LPSql_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace LPMsg {
class EmptyPB;
class EmptyPBDefaultTypeInternal;
LIBPROTOC_EXPORT extern EmptyPBDefaultTypeInternal _EmptyPB_default_instance_;
class PBSqlParam;
class PBSqlParamDefaultTypeInternal;
LIBPROTOC_EXPORT extern PBSqlParamDefaultTypeInternal _PBSqlParam_default_instance_;
class UpdateTableGroup;
class UpdateTableGroupDefaultTypeInternal;
LIBPROTOC_EXPORT extern UpdateTableGroupDefaultTypeInternal _UpdateTableGroup_default_instance_;
}  // namespace LPMsg

namespace LPMsg {

namespace protobuf_LPSql_2eproto {
// Internal implementation detail -- do not call these.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void LIBPROTOC_EXPORT AddDescriptors();
void LIBPROTOC_EXPORT InitDefaults();
}  // namespace protobuf_LPSql_2eproto

// ===================================================================

class LIBPROTOC_EXPORT PBSqlParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LPMsg.PBSqlParam) */ {
 public:
  PBSqlParam();
  virtual ~PBSqlParam();

  PBSqlParam(const PBSqlParam& from);

  inline PBSqlParam& operator=(const PBSqlParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBSqlParam(PBSqlParam&& from) noexcept
    : PBSqlParam() {
    *this = ::std::move(from);
  }

  inline PBSqlParam& operator=(PBSqlParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBSqlParam& default_instance();

  static inline const PBSqlParam* internal_default_instance() {
    return reinterpret_cast<const PBSqlParam*>(
               &_PBSqlParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PBSqlParam* other);
  friend void swap(PBSqlParam& a, PBSqlParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBSqlParam* New() const PROTOBUF_FINAL { return New(NULL); }

  PBSqlParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PBSqlParam& from);
  void MergeFrom(const PBSqlParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PBSqlParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string kname = 4;
  int kname_size() const;
  void clear_kname();
  static const int kKnameFieldNumber = 4;
  const ::std::string& kname(int index) const;
  ::std::string* mutable_kname(int index);
  void set_kname(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_kname(int index, ::std::string&& value);
  #endif
  void set_kname(int index, const char* value);
  void set_kname(int index, const char* value, size_t size);
  ::std::string* add_kname();
  void add_kname(const ::std::string& value);
  #if LANG_CXX11
  void add_kname(::std::string&& value);
  #endif
  void add_kname(const char* value);
  void add_kname(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& kname() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_kname();

  // repeated string kval = 5;
  int kval_size() const;
  void clear_kval();
  static const int kKvalFieldNumber = 5;
  const ::std::string& kval(int index) const;
  ::std::string* mutable_kval(int index);
  void set_kval(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_kval(int index, ::std::string&& value);
  #endif
  void set_kval(int index, const char* value);
  void set_kval(int index, const char* value, size_t size);
  ::std::string* add_kval();
  void add_kval(const ::std::string& value);
  #if LANG_CXX11
  void add_kval(::std::string&& value);
  #endif
  void add_kval(const char* value);
  void add_kval(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& kval() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_kval();

  // repeated string field = 6;
  int field_size() const;
  void clear_field();
  static const int kFieldFieldNumber = 6;
  const ::std::string& field(int index) const;
  ::std::string* mutable_field(int index);
  void set_field(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_field(int index, ::std::string&& value);
  #endif
  void set_field(int index, const char* value);
  void set_field(int index, const char* value, size_t size);
  ::std::string* add_field();
  void add_field(const ::std::string& value);
  #if LANG_CXX11
  void add_field(::std::string&& value);
  #endif
  void add_field(const char* value);
  void add_field(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& field() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_field();

  // repeated bytes value = 7;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 7;
  const ::std::string& value(int index) const;
  ::std::string* mutable_value(int index);
  void set_value(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_value(int index, ::std::string&& value);
  #endif
  void set_value(int index, const char* value);
  void set_value(int index, const void* value, size_t size);
  ::std::string* add_value();
  void add_value(const ::std::string& value);
  #if LANG_CXX11
  void add_value(::std::string&& value);
  #endif
  void add_value(const char* value);
  void add_value(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // string table = 3;
  void clear_table();
  static const int kTableFieldNumber = 3;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // int32 opt = 2;
  void clear_opt();
  static const int kOptFieldNumber = 2;
  ::google::protobuf::int32 opt() const;
  void set_opt(::google::protobuf::int32 value);

  // int32 reply = 8;
  void clear_reply();
  static const int kReplyFieldNumber = 8;
  ::google::protobuf::int32 reply() const;
  void set_reply(::google::protobuf::int32 value);

  // bool ret = 9;
  void clear_ret();
  static const int kRetFieldNumber = 9;
  bool ret() const;
  void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:LPMsg.PBSqlParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> kname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> kval_;
  ::google::protobuf::RepeatedPtrField< ::std::string> field_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 opt_;
  ::google::protobuf::int32 reply_;
  bool ret_;
  mutable int _cached_size_;
  friend struct protobuf_LPSql_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT UpdateTableGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LPMsg.UpdateTableGroup) */ {
 public:
  UpdateTableGroup();
  virtual ~UpdateTableGroup();

  UpdateTableGroup(const UpdateTableGroup& from);

  inline UpdateTableGroup& operator=(const UpdateTableGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTableGroup(UpdateTableGroup&& from) noexcept
    : UpdateTableGroup() {
    *this = ::std::move(from);
  }

  inline UpdateTableGroup& operator=(UpdateTableGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTableGroup& default_instance();

  static inline const UpdateTableGroup* internal_default_instance() {
    return reinterpret_cast<const UpdateTableGroup*>(
               &_UpdateTableGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UpdateTableGroup* other);
  friend void swap(UpdateTableGroup& a, UpdateTableGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTableGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateTableGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateTableGroup& from);
  void MergeFrom(const UpdateTableGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateTableGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 groupCount = 1;
  void clear_groupcount();
  static const int kGroupCountFieldNumber = 1;
  ::google::protobuf::int32 groupcount() const;
  void set_groupcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LPMsg.UpdateTableGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 groupcount_;
  mutable int _cached_size_;
  friend struct protobuf_LPSql_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT EmptyPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LPMsg.EmptyPB) */ {
 public:
  EmptyPB();
  virtual ~EmptyPB();

  EmptyPB(const EmptyPB& from);

  inline EmptyPB& operator=(const EmptyPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmptyPB(EmptyPB&& from) noexcept
    : EmptyPB() {
    *this = ::std::move(from);
  }

  inline EmptyPB& operator=(EmptyPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyPB& default_instance();

  static inline const EmptyPB* internal_default_instance() {
    return reinterpret_cast<const EmptyPB*>(
               &_EmptyPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EmptyPB* other);
  friend void swap(EmptyPB& a, EmptyPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmptyPB* New() const PROTOBUF_FINAL { return New(NULL); }

  EmptyPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmptyPB& from);
  void MergeFrom(const EmptyPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmptyPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LPMsg.EmptyPB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_LPSql_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBSqlParam

// int64 uid = 1;
inline void PBSqlParam::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PBSqlParam::uid() const {
  // @@protoc_insertion_point(field_get:LPMsg.PBSqlParam.uid)
  return uid_;
}
inline void PBSqlParam::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.uid)
}

// int32 opt = 2;
inline void PBSqlParam::clear_opt() {
  opt_ = 0;
}
inline ::google::protobuf::int32 PBSqlParam::opt() const {
  // @@protoc_insertion_point(field_get:LPMsg.PBSqlParam.opt)
  return opt_;
}
inline void PBSqlParam::set_opt(::google::protobuf::int32 value) {
  
  opt_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.opt)
}

// string table = 3;
inline void PBSqlParam::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBSqlParam::table() const {
  // @@protoc_insertion_point(field_get:LPMsg.PBSqlParam.table)
  return table_.GetNoArena();
}
inline void PBSqlParam::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.table)
}
#if LANG_CXX11
inline void PBSqlParam::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LPMsg.PBSqlParam.table)
}
#endif
inline void PBSqlParam::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.PBSqlParam.table)
}
inline void PBSqlParam::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.PBSqlParam.table)
}
inline ::std::string* PBSqlParam::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:LPMsg.PBSqlParam.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBSqlParam::release_table() {
  // @@protoc_insertion_point(field_release:LPMsg.PBSqlParam.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBSqlParam::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.PBSqlParam.table)
}

// repeated string kname = 4;
inline int PBSqlParam::kname_size() const {
  return kname_.size();
}
inline void PBSqlParam::clear_kname() {
  kname_.Clear();
}
inline const ::std::string& PBSqlParam::kname(int index) const {
  // @@protoc_insertion_point(field_get:LPMsg.PBSqlParam.kname)
  return kname_.Get(index);
}
inline ::std::string* PBSqlParam::mutable_kname(int index) {
  // @@protoc_insertion_point(field_mutable:LPMsg.PBSqlParam.kname)
  return kname_.Mutable(index);
}
inline void PBSqlParam::set_kname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.kname)
  kname_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PBSqlParam::set_kname(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.kname)
  kname_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PBSqlParam::set_kname(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  kname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LPMsg.PBSqlParam.kname)
}
inline void PBSqlParam::set_kname(int index, const char* value, size_t size) {
  kname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LPMsg.PBSqlParam.kname)
}
inline ::std::string* PBSqlParam::add_kname() {
  // @@protoc_insertion_point(field_add_mutable:LPMsg.PBSqlParam.kname)
  return kname_.Add();
}
inline void PBSqlParam::add_kname(const ::std::string& value) {
  kname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LPMsg.PBSqlParam.kname)
}
#if LANG_CXX11
inline void PBSqlParam::add_kname(::std::string&& value) {
  kname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:LPMsg.PBSqlParam.kname)
}
#endif
inline void PBSqlParam::add_kname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  kname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LPMsg.PBSqlParam.kname)
}
inline void PBSqlParam::add_kname(const char* value, size_t size) {
  kname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LPMsg.PBSqlParam.kname)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBSqlParam::kname() const {
  // @@protoc_insertion_point(field_list:LPMsg.PBSqlParam.kname)
  return kname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBSqlParam::mutable_kname() {
  // @@protoc_insertion_point(field_mutable_list:LPMsg.PBSqlParam.kname)
  return &kname_;
}

// repeated string kval = 5;
inline int PBSqlParam::kval_size() const {
  return kval_.size();
}
inline void PBSqlParam::clear_kval() {
  kval_.Clear();
}
inline const ::std::string& PBSqlParam::kval(int index) const {
  // @@protoc_insertion_point(field_get:LPMsg.PBSqlParam.kval)
  return kval_.Get(index);
}
inline ::std::string* PBSqlParam::mutable_kval(int index) {
  // @@protoc_insertion_point(field_mutable:LPMsg.PBSqlParam.kval)
  return kval_.Mutable(index);
}
inline void PBSqlParam::set_kval(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.kval)
  kval_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PBSqlParam::set_kval(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.kval)
  kval_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PBSqlParam::set_kval(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  kval_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LPMsg.PBSqlParam.kval)
}
inline void PBSqlParam::set_kval(int index, const char* value, size_t size) {
  kval_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LPMsg.PBSqlParam.kval)
}
inline ::std::string* PBSqlParam::add_kval() {
  // @@protoc_insertion_point(field_add_mutable:LPMsg.PBSqlParam.kval)
  return kval_.Add();
}
inline void PBSqlParam::add_kval(const ::std::string& value) {
  kval_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LPMsg.PBSqlParam.kval)
}
#if LANG_CXX11
inline void PBSqlParam::add_kval(::std::string&& value) {
  kval_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:LPMsg.PBSqlParam.kval)
}
#endif
inline void PBSqlParam::add_kval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  kval_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LPMsg.PBSqlParam.kval)
}
inline void PBSqlParam::add_kval(const char* value, size_t size) {
  kval_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LPMsg.PBSqlParam.kval)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBSqlParam::kval() const {
  // @@protoc_insertion_point(field_list:LPMsg.PBSqlParam.kval)
  return kval_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBSqlParam::mutable_kval() {
  // @@protoc_insertion_point(field_mutable_list:LPMsg.PBSqlParam.kval)
  return &kval_;
}

// repeated string field = 6;
inline int PBSqlParam::field_size() const {
  return field_.size();
}
inline void PBSqlParam::clear_field() {
  field_.Clear();
}
inline const ::std::string& PBSqlParam::field(int index) const {
  // @@protoc_insertion_point(field_get:LPMsg.PBSqlParam.field)
  return field_.Get(index);
}
inline ::std::string* PBSqlParam::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:LPMsg.PBSqlParam.field)
  return field_.Mutable(index);
}
inline void PBSqlParam::set_field(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.field)
  field_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PBSqlParam::set_field(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.field)
  field_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PBSqlParam::set_field(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LPMsg.PBSqlParam.field)
}
inline void PBSqlParam::set_field(int index, const char* value, size_t size) {
  field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LPMsg.PBSqlParam.field)
}
inline ::std::string* PBSqlParam::add_field() {
  // @@protoc_insertion_point(field_add_mutable:LPMsg.PBSqlParam.field)
  return field_.Add();
}
inline void PBSqlParam::add_field(const ::std::string& value) {
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LPMsg.PBSqlParam.field)
}
#if LANG_CXX11
inline void PBSqlParam::add_field(::std::string&& value) {
  field_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:LPMsg.PBSqlParam.field)
}
#endif
inline void PBSqlParam::add_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LPMsg.PBSqlParam.field)
}
inline void PBSqlParam::add_field(const char* value, size_t size) {
  field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LPMsg.PBSqlParam.field)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBSqlParam::field() const {
  // @@protoc_insertion_point(field_list:LPMsg.PBSqlParam.field)
  return field_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBSqlParam::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:LPMsg.PBSqlParam.field)
  return &field_;
}

// repeated bytes value = 7;
inline int PBSqlParam::value_size() const {
  return value_.size();
}
inline void PBSqlParam::clear_value() {
  value_.Clear();
}
inline const ::std::string& PBSqlParam::value(int index) const {
  // @@protoc_insertion_point(field_get:LPMsg.PBSqlParam.value)
  return value_.Get(index);
}
inline ::std::string* PBSqlParam::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:LPMsg.PBSqlParam.value)
  return value_.Mutable(index);
}
inline void PBSqlParam::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.value)
  value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PBSqlParam::set_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.value)
  value_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PBSqlParam::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LPMsg.PBSqlParam.value)
}
inline void PBSqlParam::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LPMsg.PBSqlParam.value)
}
inline ::std::string* PBSqlParam::add_value() {
  // @@protoc_insertion_point(field_add_mutable:LPMsg.PBSqlParam.value)
  return value_.Add();
}
inline void PBSqlParam::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LPMsg.PBSqlParam.value)
}
#if LANG_CXX11
inline void PBSqlParam::add_value(::std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:LPMsg.PBSqlParam.value)
}
#endif
inline void PBSqlParam::add_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LPMsg.PBSqlParam.value)
}
inline void PBSqlParam::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LPMsg.PBSqlParam.value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBSqlParam::value() const {
  // @@protoc_insertion_point(field_list:LPMsg.PBSqlParam.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBSqlParam::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:LPMsg.PBSqlParam.value)
  return &value_;
}

// int32 reply = 8;
inline void PBSqlParam::clear_reply() {
  reply_ = 0;
}
inline ::google::protobuf::int32 PBSqlParam::reply() const {
  // @@protoc_insertion_point(field_get:LPMsg.PBSqlParam.reply)
  return reply_;
}
inline void PBSqlParam::set_reply(::google::protobuf::int32 value) {
  
  reply_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.reply)
}

// bool ret = 9;
inline void PBSqlParam::clear_ret() {
  ret_ = false;
}
inline bool PBSqlParam::ret() const {
  // @@protoc_insertion_point(field_get:LPMsg.PBSqlParam.ret)
  return ret_;
}
inline void PBSqlParam::set_ret(bool value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.PBSqlParam.ret)
}

// -------------------------------------------------------------------

// UpdateTableGroup

// int32 groupCount = 1;
inline void UpdateTableGroup::clear_groupcount() {
  groupcount_ = 0;
}
inline ::google::protobuf::int32 UpdateTableGroup::groupcount() const {
  // @@protoc_insertion_point(field_get:LPMsg.UpdateTableGroup.groupCount)
  return groupcount_;
}
inline void UpdateTableGroup::set_groupcount(::google::protobuf::int32 value) {
  
  groupcount_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.UpdateTableGroup.groupCount)
}

// -------------------------------------------------------------------

// EmptyPB

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace LPMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LPSql_2eproto__INCLUDED
